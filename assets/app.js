angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationController",["$scope",function(o){o.$on("login",function(n,t){o.currentUser=t})}]),angular.module("app").controller("LoginController",["$scope","UserService",function(o,n){o.login=function(t,e){n.login(t,e).then(function(n){o.$emit("login",n.data)})}}]),angular.module("app").controller("PostsController",["$scope","PostsService",function(o,n){n.fetch().success(function(n){o.posts=n}),o.addPost=function(){o.postBody&&n.create({username:"jayplabs",body:o.postBody}).success(function(){o.postBody=null})},o.$on("ws:new_post",function(n,t){o.$apply(function(){o.posts.unshift(t)})})}]),angular.module("app").service("PostsService",["$http",function(o){this.fetch=function(){return o.get("/api/posts")},this.create=function(n){return o.post("/api/posts",n)}}]),angular.module("app").config(["$routeProvider",function(o){o.when("/",{controller:"PostsController",templateUrl:"posts.html"}).when("/register",{controller:"RegisterController",templateUrl:"register.html"}).when("/login",{controller:"LoginController",templateUrl:"login.html"})}]),angular.module("app").service("UserService",["$http",function(o){var n=this;n.getUser=function(){return o.get("/api/users")},n.login=function(t,e){return o.post("/api/sessions",{username:t,password:e}).then(function(t){return n.token=t.data,o.defaults.headers.common["X-Auth"]=t.data,n.getUser()})}}]),angular.module("app").run(["$rootScope",function(o){var n="ws://localhost:3000",t=new WebSocket(n);t.onopen=function(){console.log("WebSocket connected")},t.onmessage=function(n){var t=JSON.parse(n.data);o.$broadcast("ws:"+t.topic,t.data)}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmNvbnRyb2xsZXIuanMiLCJsb2dpbi5jb250cm9sbGVyLmpzIiwicG9zdHMuY29udHJvbGxlci5qcyIsInBvc3RzLnNlcnZpY2UuanMiLCJyb3V0ZXMuanMiLCJ1c2VyLnNlcnZpY2UuanMiLCJ3ZWJzb2NrZXRzLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJG9uIiwiXyIsInVzZXIiLCJjdXJyZW50VXNlciIsIlVzZXJTZXJ2aWNlIiwibG9naW4iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwidGhlbiIsInJlc3BvbnNlIiwiJGVtaXQiLCJkYXRhIiwiUG9zdHNTZXJ2aWNlIiwiZmV0Y2giLCJzdWNjZXNzIiwicG9zdHMiLCJhZGRQb3N0IiwicG9zdEJvZHkiLCJjcmVhdGUiLCJib2R5IiwicG9zdCIsIiRhcHBseSIsInVuc2hpZnQiLCJzZXJ2aWNlIiwiJGh0dHAiLCJ0aGlzIiwiZ2V0IiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJnZXRVc2VyIiwidG9rZW4iLCJkZWZhdWx0cyIsImhlYWRlcnMiLCJjb21tb24iLCJydW4iLCIkcm9vdFNjb3BlIiwidXJsIiwiY29ubmVjdGlvbiIsIldlYlNvY2tldCIsIm9ub3BlbiIsImNvbnNvbGUiLCJsb2ciLCJvbm1lc3NhZ2UiLCJlIiwicGF5bG9hZCIsIkpTT04iLCJwYXJzZSIsIiRicm9hZGNhc3QiLCJ0b3BpYyJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQUFDLE9BQUEsT0FDQSxZQ0RBRCxRQUFBQyxPQUFBLE9BQ0FDLFdBQUEseUJBQUEsU0FBQSxTQUFBQyxHQUNBQSxFQUFBQyxJQUFBLFFBQUEsU0FBQUMsRUFBQUMsR0FDQUgsRUFBQUksWUFBQUQsT0NIQU4sUUFBQUMsT0FBQSxPQUNBQyxXQUFBLG1CQUFBLFNBQUEsY0FBQSxTQUFBQyxFQUFBSyxHQUNBTCxFQUFBTSxNQUFBLFNBQUFDLEVBQUFDLEdBQ0FILEVBQUFDLE1BQUFDLEVBQUFDLEdBQ0FDLEtBQUEsU0FBQUMsR0FDQVYsRUFBQVcsTUFBQSxRQUFBRCxFQUFBRSxZQ0xBZixRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsbUJBQUEsU0FBQSxlQUFBLFNBQUFDLEVBQUFhLEdBQ0FBLEVBQUFDLFFBQUFDLFFBQUEsU0FBQUMsR0FDQWhCLEVBQUFnQixNQUFBQSxJQUdBaEIsRUFBQWlCLFFBQUEsV0FDQWpCLEVBQUFrQixVQUNBTCxFQUFBTSxRQUNBWixTQUFBLFdBQ0FhLEtBQUFwQixFQUFBa0IsV0FDQUgsUUFBQSxXQUNBZixFQUFBa0IsU0FBQSxRQUtBbEIsRUFBQUMsSUFBQSxjQUFBLFNBQUFDLEVBQUFtQixHQUNBckIsRUFBQXNCLE9BQUEsV0FDQXRCLEVBQUFnQixNQUFBTyxRQUFBRixVQ25CQXhCLFFBQUFDLE9BQUEsT0FDQTBCLFFBQUEsZ0JBQUEsUUFBQSxTQUFBQyxHQUNBQyxLQUFBWixNQUFBLFdBQ0EsTUFBQVcsR0FBQUUsSUFBQSxlQUVBRCxLQUFBUCxPQUFBLFNBQUFFLEdBQ0EsTUFBQUksR0FBQUosS0FBQSxhQUFBQSxPQ05BeEIsUUFBQUMsT0FBQSxPQUNBOEIsUUFBQSxpQkFBQSxTQUFBQyxHQUNBQSxFQUNBQyxLQUFBLEtBQUEvQixXQUFBLGtCQUFBZ0MsWUFBQSxlQUNBRCxLQUFBLGFBQUEvQixXQUFBLHFCQUFBZ0MsWUFBQSxrQkFDQUQsS0FBQSxVQUFBL0IsV0FBQSxrQkFBQWdDLFlBQUEsa0JDTEFsQyxRQUFBQyxPQUFBLE9BQ0EwQixRQUFBLGVBQUEsUUFBQSxTQUFBQyxHQUNBLEdBQUFELEdBQUFFLElBQ0FGLEdBQUFRLFFBQUEsV0FDQSxNQUFBUCxHQUFBRSxJQUFBLGVBR0FILEVBQUFsQixNQUFBLFNBQUFDLEVBQUFDLEdBQ0EsTUFBQWlCLEdBQUFKLEtBQUEsaUJBQ0FkLFNBQUFBLEVBQUFDLFNBQUFBLElBQ0FDLEtBQUEsU0FBQUMsR0FHQSxNQUZBYyxHQUFBUyxNQUFBdkIsRUFBQUUsS0FDQWEsRUFBQVMsU0FBQUMsUUFBQUMsT0FBQSxVQUFBMUIsRUFBQUUsS0FDQVksRUFBQVEsZ0JDYkFuQyxRQUFBQyxPQUFBLE9BQ0F1QyxLQUFBLGFBQUEsU0FBQUMsR0FDQSxHQUFBQyxHQUFBLHNCQUNBQyxFQUFBLEdBQUFDLFdBQUFGLEVBRUFDLEdBQUFFLE9BQUEsV0FDQUMsUUFBQUMsSUFBQSx3QkFHQUosRUFBQUssVUFBQSxTQUFBQyxHQUNBLEdBQUFDLEdBQUFDLEtBQUFDLE1BQUFILEVBQUFsQyxLQUNBMEIsR0FBQVksV0FBQSxNQUFBSCxFQUFBSSxNQUFBSixFQUFBbkMiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFtcbiAgICAnbmdSb3V0ZSdcbl0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkNvbnRyb2xsZXInLCBmdW5jdGlvbiAoJHNjb3BlKSB7XG4gICAgJHNjb3BlLiRvbignbG9naW4nLCBmdW5jdGlvbiAoXywgdXNlcikge1xuICAgICAgICAkc2NvcGUuY3VycmVudFVzZXIgPSB1c2VyXG4gICAgfSlcbn0pIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignTG9naW5Db250cm9sbGVyJywgZnVuY3Rpb24gKCRzY29wZSwgVXNlclNlcnZpY2UpIHtcbiAgICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpIHtcbiAgICAgICAgVXNlclNlcnZpY2UubG9naW4odXNlcm5hbWUsIHBhc3N3b3JkKVxuICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICRzY29wZS4kZW1pdCgnbG9naW4nLCByZXNwb25zZS5kYXRhKVxuICAgICAgICB9KVxuICAgIH1cbn0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdQb3N0c0NvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUsIFBvc3RzU2VydmljZSkge1xuICAgIFBvc3RzU2VydmljZS5mZXRjaCgpLnN1Y2Nlc3MoZnVuY3Rpb24gKHBvc3RzKSB7XG4gICAgICAgICRzY29wZS5wb3N0cyA9IHBvc3RzXG4gICAgfSlcblxuICAgICRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoJHNjb3BlLnBvc3RCb2R5KSB7XG4gICAgICAgICAgICBQb3N0c1NlcnZpY2UuY3JlYXRlKHtcbiAgICAgICAgICAgICAgICB1c2VybmFtZTogJ2pheXBsYWJzJyxcbiAgICAgICAgICAgICAgICBib2R5OiAkc2NvcGUucG9zdEJvZHlcbiAgICAgICAgICAgIH0pLnN1Y2Nlc3MoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5wb3N0Qm9keSA9IG51bGxcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAkc2NvcGUuJG9uKCd3czpuZXdfcG9zdCcsIGZ1bmN0aW9uIChfLCBwb3N0KSB7XG4gICAgICAgICRzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJHNjb3BlLnBvc3RzLnVuc2hpZnQocG9zdClcbiAgICAgICAgfSlcbiAgICB9KVxufSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ1Bvc3RzU2VydmljZScsIGZ1bmN0aW9uICgkaHR0cCkge1xuICAgIHRoaXMuZmV0Y2ggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS9wb3N0cycpXG4gICAgfVxuICAgIHRoaXMuY3JlYXRlID0gZnVuY3Rpb24ocG9zdCkge1xuICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb3N0cycsIHBvc3QpXG4gICAgfVxufSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbmZpZyhmdW5jdGlvbiAoJHJvdXRlUHJvdmlkZXIpIHtcbiAgICAkcm91dGVQcm92aWRlclxuICAgIC53aGVuKCcvJywgeyBjb250cm9sbGVyOiAnUG9zdHNDb250cm9sbGVyJywgdGVtcGxhdGVVcmw6ICdwb3N0cy5odG1sJ30pXG4gICAgLndoZW4oJy9yZWdpc3RlcicsIHtjb250cm9sbGVyOiAnUmVnaXN0ZXJDb250cm9sbGVyJywgdGVtcGxhdGVVcmw6ICdyZWdpc3Rlci5odG1sJ30pXG4gICAgLndoZW4oJy9sb2dpbicsIHtjb250cm9sbGVyOiAnTG9naW5Db250cm9sbGVyJywgdGVtcGxhdGVVcmw6ICdsb2dpbi5odG1sJ30pXG59KVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uc2VydmljZSgnVXNlclNlcnZpY2UnLCBmdW5jdGlvbiAoJGh0dHApIHtcbiAgICB2YXIgc2VydmljZSA9IHRoaXNcbiAgICBzZXJ2aWNlLmdldFVzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMnKVxuICAgIH1cblxuICAgIHNlcnZpY2UubG9naW4gPSBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkKSB7XG4gICAgICAgIHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb25zJywge1xuICAgICAgICAgICAgdXNlcm5hbWU6IHVzZXJuYW1lLCBwYXNzd29yZDogcGFzc3dvcmRcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHNlcnZpY2UudG9rZW4gPSByZXNwb25zZS5kYXRhXG4gICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1BdXRoJ10gPSByZXNwb25zZS5kYXRhXG4gICAgICAgICAgICByZXR1cm4gc2VydmljZS5nZXRVc2VyKClcbiAgICAgICAgfSlcbiAgICB9XG59KVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4ucnVuKGZ1bmN0aW9uICgkcm9vdFNjb3BlKSB7XG4gIHZhciB1cmwgPSAnd3M6Ly9sb2NhbGhvc3Q6MzAwMCdcbiAgdmFyIGNvbm5lY3Rpb24gPSBuZXcgV2ViU29ja2V0KHVybClcblxuICBjb25uZWN0aW9uLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zb2xlLmxvZygnV2ViU29ja2V0IGNvbm5lY3RlZCcpXG4gIH1cblxuICBjb25uZWN0aW9uLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIHBheWxvYWQgPSBKU09OLnBhcnNlKGUuZGF0YSlcbiAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3dzOicgKyBwYXlsb2FkLnRvcGljLCBwYXlsb2FkLmRhdGEpXG4gIH1cbn0pIl19
